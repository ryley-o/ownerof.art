type Token @entity {
  "Unique identifier made up of contract address and token id"
  id: ID!

  "The contract that the token is on"
  contract: Contract!

  "Token id of the token"
  tokenId: BigInt!

  "Messages that are associated with the token"
  messages: [Message!] @derivedFrom(field: "token")

  "Last update to the token or its messages"
  updatedAt: BigInt!
}

type Contract @entity {
  "Unique identifier made up of the contract address"
  id: ID!

  "Address of the contract"
  address: Bytes!

  "Name of the contract"
  name: String!

  "Symbol of the contract"
  symbol: String!

  "Tokens that are associated with the contract"
  tokens: [Token!] @derivedFrom(field: "contract")

  "Messages that are associated with the contract"
  messages: [Message!] @derivedFrom(field: "contract")

  "Last update to the contract or its tokens"
  updatedAt: BigInt!
}

type Message @entity {
  "unique identifier made up of the contract address, token id, and message index"
  id: ID!

  "Token that the message is associated with"
  token: Token!

  "Address of the contract that the token is on"
  contract: Contract!

  tokenId: BigInt!

  "Index of the message"
  index: BigInt!

  "Address of the owner who posted the message"
  owner: Bytes!

  "Content of the message"
  message: String!

  "Tip amount sent with the message"
  tip: BigInt!

  "Bytecode Storage contract address for the message"
  bytecodeAddress: Bytes!

  "Transaction hash of when the message was posted"
  txHash: Bytes!

  "Block number of when the message was posted"
  blockNumber: BigInt!

  "Network that the message was posted on"
  network: String!

  "Timestamp of when the message was posted"
  timestamp: BigInt!
}
