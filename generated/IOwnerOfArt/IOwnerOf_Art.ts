// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class MessagePosted extends ethereum.Event {
  get params(): MessagePosted__Params {
    return new MessagePosted__Params(this);
  }
}

export class MessagePosted__Params {
  _event: MessagePosted;

  constructor(event: MessagePosted) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bytecodeStorageAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class IOwnerOf_Art__getMessageAtIndexResultValue0Struct extends ethereum.Tuple {
  get bytecodeStorageAddress(): Address {
    return this[0].toAddress();
  }

  get sender(): Address {
    return this[1].toAddress();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get message(): string {
    return this[3].toString();
  }
}

export class IOwnerOf_Art__getMessagesResultValue0Struct extends ethereum.Tuple {
  get bytecodeStorageAddress(): Address {
    return this[0].toAddress();
  }

  get sender(): Address {
    return this[1].toAddress();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get message(): string {
    return this[3].toString();
  }
}

export class IOwnerOf_Art extends ethereum.SmartContract {
  static bind(address: Address): IOwnerOf_Art {
    return new IOwnerOf_Art("IOwnerOf_Art", address);
  }

  DELEGATE_REGISTRY(): Address {
    let result = super.call(
      "DELEGATE_REGISTRY",
      "DELEGATE_REGISTRY():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_DELEGATE_REGISTRY(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "DELEGATE_REGISTRY",
      "DELEGATE_REGISTRY():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMessageAtIndex(
    tokenAddress: Address,
    tokenId: BigInt,
    index: BigInt
  ): IOwnerOf_Art__getMessageAtIndexResultValue0Struct {
    let result = super.call(
      "getMessageAtIndex",
      "getMessageAtIndex(address,uint256,uint256):((address,address,uint40,string))",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(index),
      ]
    );

    return changetype<IOwnerOf_Art__getMessageAtIndexResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMessageAtIndex(
    tokenAddress: Address,
    tokenId: BigInt,
    index: BigInt
  ): ethereum.CallResult<IOwnerOf_Art__getMessageAtIndexResultValue0Struct> {
    let result = super.tryCall(
      "getMessageAtIndex",
      "getMessageAtIndex(address,uint256,uint256):((address,address,uint40,string))",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(index),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IOwnerOf_Art__getMessageAtIndexResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getMessageCount(tokenAddress: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "getMessageCount",
      "getMessageCount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ]
    );

    return result[0].toBigInt();
  }

  try_getMessageCount(
    tokenAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMessageCount",
      "getMessageCount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMessages(
    tokenAddress: Address,
    tokenId: BigInt
  ): Array<IOwnerOf_Art__getMessagesResultValue0Struct> {
    let result = super.call(
      "getMessages",
      "getMessages(address,uint256):((address,address,uint40,string)[])",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ]
    );

    return result[0].toTupleArray<
      IOwnerOf_Art__getMessagesResultValue0Struct
    >();
  }

  try_getMessages(
    tokenAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<Array<IOwnerOf_Art__getMessagesResultValue0Struct>> {
    let result = super.tryCall(
      "getMessages",
      "getMessages(address,uint256):((address,address,uint40,string)[])",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<IOwnerOf_Art__getMessagesResultValue0Struct>()
    );
  }
}

export class PostMessageCall extends ethereum.Call {
  get inputs(): PostMessageCall__Inputs {
    return new PostMessageCall__Inputs(this);
  }

  get outputs(): PostMessageCall__Outputs {
    return new PostMessageCall__Outputs(this);
  }
}

export class PostMessageCall__Inputs {
  _call: PostMessageCall;

  constructor(call: PostMessageCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get message(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class PostMessageCall__Outputs {
  _call: PostMessageCall;

  constructor(call: PostMessageCall) {
    this._call = call;
  }
}
